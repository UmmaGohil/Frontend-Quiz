{
  "easy": [
    {
      "question": "What's the difference between state and props in React?",
      "answers": [
        {
          "ans": "State is immutable and props are immutable",
          "correct": false
        },
        { "ans": "State is mutable and props are immutable", "correct": true },
        { "ans": "Both state and props are the same thing", "correct": false },
        { "ans": "None of the above", "correct": false }
      ]
    },
    {
      "question": "Which one isn't a React hook?",
      "answers": [
        { "ans": "useState", "correct": false },
        { "ans": "useReducer", "correct": false },
        { "ans": "useEffect", "correct": false },
        { "ans": "None of the above", "correct": true }
      ]
    },
    {
      "question": "What is a virtual DOM?",
      "answers": [
        { "ans": "A copy of the DOM", "correct": false },
        { "ans": "A lightweight abstraction of the DOM", "correct": true },
        { "ans": "An implementation made by React", "correct": false },
        { "ans": "None of the above", "correct": false }
      ]
    },
    {
      "question": "What is the difference between == and ===?",
      "answers": [
        {
          "ans": "== compares for equality and type is converted and === will only compare type of value",
          "correct": true
        },
        {
          "ans": "== compares two values and === compares three values",
          "correct": false
        },
        { "ans": "Both do the same thing", "correct": false },
        { "ans": "None of the above", "correct": false }
      ]
    },
    {
      "question": "What's the difference between let and const?",
      "answers": [
        {
          "ans": "Let is used for variables with mutable data. Const is used for immutable data.",
          "correct": true
        },
        {
          "ans": "Let is used for immutable data. Const is used for mutable data.",
          "correct": false
        },
        { "ans": "Both do the same thing", "correct": false },
        { "ans": "None of the above", "correct": false }
      ]
    }
  ],
  "mid": [
    {
      "question": "When should you use a class component over a functional component in React?",
      "answers": [
        { "ans": "Both have the same functionality", "correct": false },
        {
          "ans": "Class components enable users to use lifecycle methods and functional components do not",
          "correct": true
        },
        {
          "ans": "Functional components enable lifecycle methods",
          "correct": false
        },
        { "ans": "None of hte above are correct", "correct": false }
      ]
    },
    {
      "question": "What is the use of refs?",
      "answers": [
        { "ans": "A way to access DOM nodes", "correct": true },
        {
          "ans": "Anything that needs to be done declaratively",
          "correct": false
        },
        { "ans": "Not used anymore", "correct": false },
        { "ans": "Both A and B are correct", "correct": false }
      ]
    },
    {
      "question": "What is a key prop and why is it used in array elements?",
      "answers": [
        { "ans": "Remove ReactJS error warning", "correct": false },
        {
          "ans": "Important for DOM nodes and enables you to control component instances.",
          "correct": true
        },
        { "ans": "A and B are correct", "correct": false },
        { "ans": "A and B are incorrect", "correct": false }
      ]
    },
    {
      "question": "What is hoisting?",
      "answers": [
        { "ans": "Moving declarations to the top", "correct": true },
        { "ans": "Declaring and assiging variables", "correct": false },
        { "ans": "A and B are correct", "correct": false },
        { "ans": "A and B are incorrect", "correct": false }
      ]
    },
    {
      "question": "What's the difference between synchronous and asychronous functions?",
      "answers": [
        {
          "ans": "In synchronous functions the code execution waits for the event before continuing. In asynchronous code is executed whilst other parts of the program are running",
          "correct": true
        },
        {
          "ans": "In synchronous functions the code is executed while other parts of the program are running. In asynchronous code is executed after the event.",
          "correct": false
        },
        { "ans": "There is no difference", "correct": false },
        { "ans": "Both A and B are incorrect", "correct": false }
      ]
    }
  ],
  "hard": [
    {
      "question": "Which of these isn't part of WCAG 2.0?",
      "answers": [
        {
          "ans": "Level A: the most basic web accessibility features",
          "correct": false
        },
        {
          "ans": "Level AA: the most common barriers for disabled people",
          "correct": false
        },
        {
          "ans": "Level AAA: the hieghest level of accessibility",
          "correct": false
        },
        { "ans": "All three are part of the WCAG 2.0", "correct": true }
      ]
    },
    {
      "question": "What is the difference between authorisation and authentication?",
      "answers": [
        {
          "ans": "Authenticate is the process of verifying who the user is and authorisation is the process of verifying what they have access to",
          "correct": true
        },
        { "ans": "They are both the same", "correct": false },
        {
          "ans": "Authentication is the process of what they have access to and authorisation is verifying the user",
          "correct": false
        },
        { "ans": "Both answers A and C are correct", "correct": false }
      ]
    },
    {
      "question": "Which one is incorrect?",
      "answers": [
        {
          "ans": "Local storage improves cookies, giving more storage capacity",
          "correct": false
        },
        {
          "ans": "In session stoage the data is only available during the page session",
          "correct": false
        },
        {
          "ans": "There is no limit on how big a cookie can be",
          "correct": true
        },
        { "ans": "All three above are incorrect", "correct": false }
      ]
    },
    {
      "question": "Use of ~ and ^ in package.json",
      "answers": [
        { "ans": "They both have similar uses", "correct": false },
        { "ans": "^ is for bug fixes only", "correct": false },
        {
          "ans": "With ~ only the latest bug fixes are allowed",
          "correct": true
        },
        { "ans": "Both B and C are correct", "correct": false }
      ]
    },
    {
      "question": "Which of these is not a git command",
      "answers": [
        { "ans": "git checkout -b newBranch", "correct": false },
        { "ans": "git push origin main", "correct": false },
        { "ans": "git cherry-pick", "correct": false },
        { "ans": "git delete", "correct": true }
      ]
    }
  ]
}
